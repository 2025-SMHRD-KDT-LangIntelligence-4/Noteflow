좋은 요청이에요 — 역할 지시처럼 **간단하지만 확실히 성능을 올려주는 프롬프트 기법**들을 단계별로 정리해드릴게요.
각 항목은 **무엇인지 → 왜 효과적인지 → 바로 쓸 수 있는 프롬프트 템플릿 → 실전 팁** 순서로 짧고 실용적으로 제공합니다.

# 간단하지만 강력한 12가지 프롬프트 기법 (즉시 사용 가능)

---

1. **역할(Role) 지정**

* 무엇: 모델에게 `~전문가`, `~멘토`, `~검토자` 같은 신분을 부여.
* 왜: 특정 도메인과 말투로 결과 분포를 편향(프라이밍)해 전문적·일관된 출력 유도.
* 템플릿:

```
너는 10년 경력의 사이버보안 전문가야. 사용자는 비전문가이므로 비유와 쉬운 용어로 설명해줘. 톤: 친절하고 전문적. 분량: 각 항목 2문장 이내.
```

* 팁: 역할에 **경력 연수, 타겟(초심자/관리자), 톤**을 넣으면 효과↑.

---

2. **출력 형식(Format) 명시**

* 무엇: JSON / 표 / 마크다운 / 체크리스트 등 명확한 출력 포맷을 요구.
* 왜: 모델이 해석·후처리하기 쉬운 정형화된 응답 제공 → 불확실성 감소.
* 템플릿:

```
출력은 JSON 배열로만 반환해줘: [{ "title": "...", "summary": "...", "confidence": 0-1 }]. 부가 설명은 허용하지 마.
```

* 팁: 후처리 파이프라인이 있다면 정확한 키 이름까지 고정하라.

---

3. **Few-shot (예시 제공)**

* 무엇: 1\~3개의 입출력 예시를 함께 제공.
* 왜: 모델이 원하는 스타일·세부 수준을 학습 데이터처럼 참고함(강력한 프라이밍).
* 템플릿:

```
예시1)
질문: A에 대해 간단히 설명해줘.
답변: A는 ... (원하는 스타일)

이제 본문 질문: [실제질문]
```

* 팁: 예시는 가능한 한 **실제 원하는 출력과 유사한 예**로 만들 것.

---

4. **제약(Constraints)·우선순위 명시**

* 무엇: 길이, 포함/제외 항목, 필수 키워드, 금지사항 등을 명확히.
* 왜: 모델의 출력 후보 공간을 좁혀 불필요한 정보 감소.
* 템플릿:

```
조건: (1) 200자 이내, (2) 기술적 용어는 괄호 안에 정의, (3) 결론 먼저, 근거는 항목별로 2개만.
```

* 팁: 상충하는 제약은 피하고, 우선순위를 숫자(우선순위 1\~3)로 주면 혼선 감소.

---

5. **계획(Plan) 먼저 → 최종 답변(Plan-first) 패턴**

* 무엇: 먼저 3단계 계획을 출력하게 한 뒤 최종 결과를 요구.
* 왜: 모델이 구조를 잡은 후 생성해 일관성·완성도 상승. (내부 사고는 요약 계획 형태로만 요구)
* 템플릿:

```
먼저 3단계로 해결 계획을 간단히 보여줘. 그 다음 그 계획을 따라 최종 답변을 제공해줘.
(출력 형식: 1) 계획, 2) 최종답변)
```

* 팁: 계획은 1\~3문장으로 간결하게 제한.

---

6. **샘플 테스트 케이스 제공 (검증용 입력/정답)**

* 무엇: 입력과 기대 출력(또는 통과 기준)을 제공.
* 왜: 모델이 ‘테스트를 만족해야 한다’는 목표로 답변 생성 → 실무적 정확성 향상.
* 템플릿:

```
테스트 케이스:
입력: "X"
기대 출력: "Y"
이 테스트를 통과하는 코드/설명만 제시해줘.
```

* 팁: 특히 코드/변환 문제에서 효과 만점.

---

7. **Self-check / Critic(리뷰어) 역할 사용**

* 무엇: 생성 후 모델에게 자체 검토를 시키거나, 별도 ‘검토자’ 역할을 부여해 오류·누락을 찾아내게 함.
* 왜: 실수·모순을 잡아내고 수정 제안까지 얻음.
* 템플릿:

```
너는 방금 생성한 답변의 '검토자'야. 다음 항목을 점검해줘: 논리적 오류, 근거 부족, 오타. 각 항목별로 고칠 점과 수정 문장 제시.
```

* 팁: 결과물에 대해 “상위 3개 위험요소”처럼 우선순위로 정리하게 하라.

---

8. **정의(Definitions)·컨텍스트 제공**

* 무엇: 특정 용어·약어·도메인 규칙을 미리 정의.
* 왜: 동일 용어가 여러 의미로 해석되는 것을 방지.
* 템플릿:

```
용어 정의:
- KPI: ...,
- 활성 사용자(DAU): ...
이 정의를 기준으로 분석해줘.
```

* 팁: 도메인 특별용어가 많으면 꼭 넣어라.

---

9. **온도(Temperature) 및 디코딩 설정 안내**

* 무엇: 생성의 무작위성 수준을 조절(0 = 결정적, 1 = 매우 창의적). (API/설정 가능할 때)
* 왜: 안정적 응답 원하면 낮게, 창의성이 필요하면 높게.
* 권장: 정형 작업 → 0\~0.3, 글쓰기·아이디어 → 0.7 이상.
* 팁: 채팅 UI에서 설정 불가하면 프롬프트에서 “간결하고 결정적으로” 같은 문구로 대체.

---

10. **Prompt chaining (단계별 분할 처리)**

* 무엇: 한 번에 모든 걸 묻지 말고, *추출 → 변환 → 생성*으로 프롬프트를 나눔.
* 왜: 각 단계별로 오류를 잡고 수정할 수 있어 복잡한 작업 안정화.
* 예: (1) 텍스트에서 핵심 문장 추출 → (2) 요약 → (3) 요약을 기반으로 기사 작성.
* 팁: 각 단계의 출력 형식을 명확히 고정하면 파이프라인 자동화 쉬움.

---

11. **우선 답변 요약(One-line) + 상세 확장 옵션**

* 무엇: "먼저 한 문장 요약 → 필요하면 단계별 상세" 지시.
* 왜: 빠른 확인 후 추가 요구로 시간 절약 및 반복 개선 가능.
* 템플릿:

```
1) 한 줄 요약
2) 중요한 근거 3개(각각 1문장)
3) 자세한 설명은 '자세히'라고 입력하면 확장
```

* 팁: 회의나 신속 검토용으로 좋음.

---

12. **출력 신뢰도(Confidence)·불확실성 표기 요구**

* 무엇: 모델에게 각 주장 옆에 신뢰도(0-1)나 불확실성 표기를 요구.
* 왜: 사용자가 어느 부분을 검증해야 하는지 빠르게 파악 가능.
* 템플릿:

```
각 핵심 주장 옆에 confidence: 0-1 형식으로 신뢰도 표기해줘. 근거가 없는 항목은 'low'로 표기.
```

* 팁: 사실 검증이 필요한 정보(예: 날짜, 통계)는 반드시 출처 요구.

---

# 결합 예시 (실전용 — 복수 기법 결합)

아래 프롬프트는 **역할 + 출력형식 + 계획-first + self-check + 테스트케이스**를 결합한 예시입니다.

```
시스템(또는 초반지시): 당신은 제품 매니저 역할의 전문가입니다.
사용자: 다음 제품 출시 보고서를 준비해줘.
요구사항:
1) 먼저 3단계 계획을 보여줘(1~3문장).
2) 결과는 JSON: { "summary": "...", "top_risks": [...], "next_actions": [...] } 형식으로만 반환.
3) 테스트: "시장 진입 속도" 항목에 대해 2문장 이내로 설명해야 통과.
4) 생성 후 검토자 역할로 돌아가서 '문제점 3가지'와 수정 제안을 덧붙여줘.
```

---

# 빠른 체크리스트 (복사해 쓰기)

* 역할 + 대상(초심자/전문가) + 톤
* 출력 형식(예: JSON) 고정
* 1\~3개의 예시(예문) 제공
* 명확한 제약(길이, 포함/제외)
* Plan-first + Self-check 순환

---

📌 마무리(요약)
간단한 프롬프트 설계(역할, 포맷, 예시, 제약, 계획 우선, 자체검토, 테스트 케이스)를 **조합**하면 LLM의 출력 품질이 크게 올라갑니다. 각각은 별도로도 효과적이지만, 실무에선 **작은 템플릿을 미리 만들어 재활용**하는 것이 가장 효율적이에요.

원하시면 지금 진행 중인 작업(주제)을 알려주시면—그 작업에 최적화된 **프롬프트 템플릿 3개** 곧바로 만들어 드릴게요. 어떤 작업으로 만들까요?
